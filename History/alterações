--20 de Novembro de 2023--

üß≠Ô∏èVis√£o geral:
	‚úÖÔ∏èEstrutura de imagens completamente funcional.
	‚úÖÔ∏èEstrutura de frames primitivos completamente funcional.
	‚úÖÔ∏èFrames "menu" completamente funcionais.
	‚úÖÔ∏èEstrutura de tabelas funcional, atuando diretamente na gest√£o de arquivos.
	‚úÖÔ∏èModo "table" para frames completamente funcional.
	‚úÖÔ∏èModo "input" para frames completamente funcional.
	
	üóìÔ∏èPr√≥ximas atividades:
		‚Ä¢Adicionar char *Footer para atuar como "legenda" dos frames.
		‚Ä¢Criar modo "form" para frames.
			>Estrutura semelhante a menu, onde cada linha representa uma caracter√≠stica a ser cadastrada.
			>Rela√ß√£o direta com a tabela atribu√≠da.
		‚Ä¢Criar estrutura program.

üößÔ∏èAltera√ß√µes em str.h:
	‚Ä¢Criada fun√ß√£o para converter qualquer valor para texto.
	‚Ä¢Implementado strLenPlus, que permite medir textos com terminaodores espec√≠ficos.
	‚Ä¢Criado bufferClean para preencher char * com '\0';
	
üößÔ∏èAltera√ß√µes em frame.h:
	‚Ä¢frameSetSubTitle criado e vinculado √† frameRefresh de todos os tipos poss√≠veis;
	‚Ä¢frameSetTable implementado.
	
	‚Ä¢Criado frameTableTitles para formatar t√≠tulos da coluna das tabelas atribu√≠das.
	‚Ä¢frameRefreshMenu 100% funcional.
	‚Ä¢frameRefreshTable 100% funcional.
	‚Ä¢frameRefresh ser√° usado para gerenciar modos (fun√ß√£o separada em capsulas).
	‚Ä¢Criado frameSetInput para inicializar frame no modo input.
	‚Ä¢Criado frameInputAdd para adicionar um char ao buffer.
	‚Ä¢Criado frameInputSub para remover √∫ltimo char do buffer.
	‚ö†Ô∏èBasta atribuir input em frame.inputBuffer[0] para atulizar visualiza√ß√£o da tabela automaticamente.

üößÔ∏èAltera√ß√µes em table.h:
	‚Ä¢Estrutura de tabela criada.
	‚Ä¢Criado tableSetup.
	‚Ä¢Criado tableRealloc.
	‚Ä¢Criado tableCopy para auxiliar na atualizal√ßao dos frames.
	
	‚Ä¢Criado tableNewLine.
	‚Ä¢Criado tableCursor para calcular index de determinado registro.
	‚Ä¢Criado tableBuffer para copiar a tabela a partir de determinado registro (isso tamb√©m limpa a tabela a partir do cursor).
	
	‚Ä¢Criada fun√ß√£o tableIsert para identificar automaticamente o tipo da coluna a inserir valor
	‚Ä¢Fun√ß√£o tableIsertT 100% funcional (int, float, char).
	‚Ä¢Fun√ß√£o tableInsertS criada para inserir strings 100% funcional (se atentar a aloca√ß√£o adequada da string que ser√° usada).
	
	‚Ä¢Fun√ß√£o tableDelete criada para funcionar em conjunto com tableUpdate 100% funcional.
	‚Ä¢Criada tableUpdate pra atualizar cadastros 100% funcional.
	
	‚Ä¢Criada tableGetJump para retornar o cursor do in√≠cio da pr√≥xioma p√°gina da tabela.
	
	‚Ä¢Criada tableToTxt 100% funcional.
	‚Ä¢Criada txtToTable 100% funcional.
	
	‚Ä¢Criada tableRefresh para atuar com frameRefres.
	
	‚Ä¢Criada tableGet para obter valor de determinada c√©lula (sa√≠da em char *, necessita convers√£o com fun√ß√µes at).
	
	‚Ä¢Criado tableFree para liberar todos os alocamentos din√¢micos.
	
	‚ö†Ô∏ètableInsertS possu√≠ bug que limita a quantidade de caracteres a 74.

===========================================================
--09 de Novembro de 2023--
üß≠Ô∏èVis√£o geral:
	‚úÖÔ∏èEstrutura de imagens completamente funcinal.
	‚úÖÔ∏èEstrutura de frames primitivos completamente funcional.
	‚úÖÔ∏èFrames "menu" completamente funcionais.
	
	üóìÔ∏èPr√≥ximas atividades:
		‚Ä¢Criar estrutura de tabelas.
		‚Ä¢Criar modo "table" para frames.
		 >Implementar m√©todos construtores.
		‚Ä¢Criar modo "input" para frames.
		 >ser√° armazenado em frame.inputBuffer e ter√° um limite de caracteres definido pelo desenvolvedor.
		‚Ä¢Criar modo "form" para frames.
		 >Estrutura semelhante a menu, onde cada linha representa uma caracter√≠stica a ser cadastrada.
		 >Rela√ß√£o direta com a tabela atribu√≠da.
		‚Ä¢Criar estrutura program.

üó∫Ô∏èAltera√ß√µes no escopo:
	‚Ä¢‚ö†Ô∏èRecomenda√ß√£o: para alterar estado do programa, getch() pode ser comparado com 10(decimal de enter).
	‚Ä¢‚ö†Ô∏èInternamente, os modos s√£o reconhecidos apenas pela primeira letra de seu nome.
	‚Ä¢Program ter√° vari√°vel breaK, para indicar finaliza√ß√£o do programa.
	‚Ä¢Existir√£o prot√≥tipos de m√©todos para serem definidos pelo desenvolvedor:
		>programUpdadte - chamado uma vez a cada tick.
		>programFUpdate - chamado a cada x intervalos de tempo.
	‚Ä¢Adicionado msCounter e msUpdate em program para funcionar em conjunto com programFUpdate.
	‚Ä¢msUpdate inicia em 16ms.
	‚Ä¢‚ö†Ô∏ègetch (multOS) adicionado ao projeto (fonte devidamente creditada)
	
üößÔ∏èAltera√ß√µes em str.h:
	‚Ä¢Definido constante true = 1.
	‚Ä¢Definido constante false = 0.
	‚Ä¢Criado strCat. (necessita de realloc externo)
	
üößÔ∏èAltera√ß√µes em frames.h:
	‚Ä¢Adicionado char *options na estrutura de frames. 100% funcioal
		>"opcao1|opcao2|".
	‚Ä¢Adicionado int qtdOptions na estrutura de frames.
	
	‚Ä¢frameSetCursor agora √© 100% funcional.
	
	‚Ä¢Implementado frameInsert - 100% funcional.
	‚Ä¢frameInsertCenter - 100% funcional.
	‚Ä¢Criado frameInsertOption - escreve pr√≥xima op√ß√£o.
	‚Ä¢Criado frameCleanOption - remove todas op√ß√µes.
	‚Ä¢frameCursorAdd adicionado.
	‚Ä¢frameCursorSub adicionado.
	‚Ä¢‚ö†Ô∏èDin√¢mica de op√ß√£o selecionada funcional.
		>Todo frame do modo "menu" armazena a posi√ß√£o atualmente selecionada.
	
	‚Ä¢frameRefresh obsoleto. (preservado para poss√≠vel uso)
	‚Ä¢frameFree 100%
	
	‚Ä¢Bug no frame insert ap√≥s inserir op√ß√µes solucionado.
	‚Ä¢Bug no frame insert center que sobreescrevia √∫ltima atualiza√ß√£o solucionado.


===========================================================	
--01 de Novembro de 2023--(reset do projeto...)

‚óàConstru√≠da a estrutura de Image, com as seguintes fun√ß√µes:
	‚Ä¢void imageSetup(Image *image, int width, int height, char _realoc);
	
	‚Ä¢void imageShow(Image *image);
	
	‚Ä¢void imageClean(Image *image);
	‚Ä¢void imageCopy(Image *imageDestiny,Image  *imageOrigin, int x, int y);
	‚Ä¢void imageResize(Image *image, int newWidth, int newHeight);
	
	‚Ä¢void imageInsert(Image *image, char *string, int x, int y);
	
	‚Ä¢void freeImage(Image *image);
	
‚óàCom base em imagem, criada a estrutura de Frame, com as seguintes fun√ß√µes:
	‚Ä¢void frameSetup(Frame *frame, char *title, int width, int height, char _realloc);
	‚Ä¢void repairFrame(Frame *frame);

	‚Ä¢void frameSetCursor(Frame *frame, int x, int y);

	‚Ä¢void frameClean(Frame *frame);
	‚Ä¢void frameCopy(Frame *frameDestiny, Frame *frameOrigin,int x, int y);
	‚Ä¢void frameResize(Frame *frame, int newWidth, int newHeight);

	//Ainda n√£o implementadas...
	//void frameSetTable(Frame *frame, Table *table);
	//void frameSetFooter(Frame *frame, Footer *footer);

	‚Ä¢void frameInsert(Frame *frame,char *string, int x, int y);
	‚Ä¢void frameRefresh(Frame *frame);

	‚Ä¢void frameFree(Frame *frame);

‚óàCriado str.h para fun√ß√µes mais espec√≠ficas de string. contendo os m√©todos:
	‚Ä¢int strLen(char *string);
	‚Ä¢void strCopy(char *strDestiny, char *strOrigin);
	‚Ä¢void getBiggest(char *string, int *bigLen);
	
!frameResize ainda infuncional!

üéØPr√≥ximos passos:
 ‚Ä¢Criar estrutura de rodap√©:
  >ser√° a √∫ltima impress√£o no frame.
  >exibe a op√ß√£o selecionada, pagina atual da tabela(caso haja) e legenda de teclas.
  
 ‚Ä¢Completar sistema de exibi√ß√£o de frames, permitindo:
  >entrada com atualiza√ß√£o em tempo real. manipulando (char *) da main.
  >altera√ß√£o do fluxo do programa por par√¢metros do frame.
  >exibi√ß√£o din√¢mica de tabela, com navega√ß√£o entre p√°ginas.
  
 ‚Ä¢Organiza√ß√£o do c√≥digo:
  >identificar e aplicar todos os "frees" de mallocs necess√°rios.
  >limpar redund√¢ncias.
  >encapsular fun√ß√µes.
 
===========================================================
--?? de ??--
TESTE FALHOU:
 >Inclu√≠do colsPointer na estrutura de tabela para armezenar ponteiros das colunas em int *.
 >Inclu√≠do colsType na estrutura de tabela para armazenar a tipagem de cada coluna em void *.
 .TENTAR:
  >Armazenar ponteiros em uma string buffer e criar fun√ß√µes para add ponteiros e limpar lista.
 
Criada fun√ß√£o de atribuir ponteiro √† coluna da tabela.

RefreshCol redesenhada para ser mais intuitiva.
 >agora tamb√©m ajusta automaticamente a largura da coluna.
tableSetup redesenhado para ser mais intuitivo.
 >Agora armazena subTitles completamente.
FrameSetup agora cria a janela automaticamente.
criado frameRefresh para atualizar o desenho do frame com base nas estruturas internas.
criado refreshTable.
 >reajusta largura das colunas, sendo a largura m√≠nima o tamanho do sub t√≠tulo.
adicionado biggestStr √† suportFunctions.
 >suporta diferentes tipos

--26 de Outubro de 2023--

‚óàCriado frameInsert 100% funcional.
‚óàCriado frameIsertTable 100% funcional.


‚óàCriada a estrutura de tabelas, juntamente ao seu construtor.
 ‚Ä¢criado tableSetup, permitindo a cria√ß√£o de tabelas de maneira din√¢mica.
 ‚Ä¢implementada fun√ß√£o para atualizar coluna da tabela.(funciona para int, .2float e str).
 ‚Ä¢criada fun√ß√£o para inserir tabela em frame (Cabe√ßalho e tabelas lado a lado 100% funcional).
 ‚Ä¢implementado freeTable para liberar alocamentos din√¢micos da tabela.
 
‚óàDemais adi√ß√µes
 ‚Ä¢implementado freeFrame para liberar alocamentos din√¢micos do frame.
 ‚Ä¢primeiros testes de frameCopy (ainda infuncional).
 
‚úÖConclu√≠do:
 ‚Ä¢Consru√ß√£o de sistema intuitivo para edi√ß√£o do layout do frame.
 ‚Ä¢Constru√ß√£o do sistema de "m√°scara", que permitir√° posicionar informa√ß√µes vari√°veis em pontos espec√≠ficos do layout.
 
üéØPr√≥ximos passos:
 ‚Ä¢Criar estrutura de rodap√©:
  >ser√° a √∫ltima impress√£o no frame.
  >exibe a op√ß√£o selecionada, pagina atual da tabela(caso haja) e legenda de teclas.
  
 ‚Ä¢Completar sistema de exibi√ß√£o de frames, permitindo:
  >entrada com atualiza√ß√£o em tempo real. manipulando (char *) da main.
  >altera√ß√£o do fluxo do programa por par√¢metros do frame.
  >exibi√ß√£o din√¢mica de tabela, com navega√ß√£o entre p√°ginas.
  
 ‚Ä¢Organiza√ß√£o do c√≥digo:
  >identificar e aplicar todos os "frees" de mallocs necess√°rios.
  >limpar redund√¢ncias.
  >encapsular fun√ß√µes.
  
===========================================================
--19 de Outubro de 2023--

‚óàConstructorAll obsoleto, substitu√≠do por constructorWindow
 ‚Ä¢Utiliza as informa√ß√µes do frame para construir uma janela vazia.
‚óàFrameSetSize renomeado para frameSetup.
 ‚Ä¢inicialiador da estrutura, necessita do t√≠tulo, caractere de borda e dimens√µes.
‚óàEstrutura de frame atualizada, acrescentado: title(t√≠tulo do frame), border(borda do frame)
‚óàCriado frameResize 100% funcional
 ‚Ä¢basta passar como par√¢mentro o frame e as novas dimens√µes.
 ‚Ä¢a mem√≥ria √© realocada din√¢micamente.

üéØPr√≥ximos passos:
 ‚Ä¢Constru√ß√£o do sistema de "m√°scara", que permitir√° posicionar informa√ß√µes vari√°veis em pontos espec√≠ficos do layout.
 ‚Ä¢Consru√ß√£o dee sistema intuitivo para edi√ß√£o do layout do frame.

===========================================================
--17 de Outubro de 2023--
 
‚óàCriada Estrutura de frames para armazenamento de layouts.
‚óàDuas fun√ß√µes para constru√ß√£o de layout implementadas.
‚óàTeste de "Base de Frames", o programador pode desenvolver os frames dentro da fun√ß√£o, atribuindo o id que ser√° usado posteriormente.
‚óàImplementada fun√ß√µes de exibi√ß√£o de frame e exibi√ß√£o de sobreposi√ß√£o de frames.

üéØPr√≥ximos passos:
 ‚Ä¢Constru√ß√£o do sistema de "m√°scara", que permitir√° posicionar informa√ß√µes vari√°veis em pontos espec√≠ficos do layout.
